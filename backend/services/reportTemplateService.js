const { sanitizeText, sanitizeHtml } = require('../utils/sanitizer');
const { convertMarkdownToHtml, convertMarkdownToEmailHtml } = require('../utils/markdownConverter');

function renderNewsWeb(news = []) {
    if (!Array.isArray(news) || news.length === 0) return '';
    return `
    <div class="papers-section">
        <h2>ðŸ“° News</h2>
        ${news.map(group => {
            const summariesById = Object.fromEntries((group.perArticleSummaries || []).map(s => [s.articleId, s]));
            return `
            <div class="paper-item">
                <div class="paper-title">${sanitizeText(group.topic || '')}</div>
                ${(group.articles || []).map(article => {
                    const s = summariesById[article.id] || {};
                    const link = sanitizeText(s.link || article.shortUrl || article.url || '#');
                    const published = sanitizeText(article.publishedAt || '');
                    const byline = article.byline ? ` â€” ${sanitizeText(article.byline)}` : '';
                    const summaryText = sanitizeText(s.text || '');
                    return `
                    <div style="margin: 16px 0;">
                        <div style="font-weight:600;">
                            <a href="${link}" target="_blank" class="paper-link">${sanitizeText(article.title || 'Untitled')}</a>${byline}
                        </div>
                        <div style="color:#999; font-size:0.9em;">${published}</div>
                        <br/>
                        <div style="margin-top:8px;">${summaryText.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</div>
                        <div style="margin-top:6px;"><a href="${link}" target="_blank" class="paper-link">Read full article</a></div>
                    </div>
                    `;
                }).join('')}
                <div style="font-size:0.85em; color:#666; margin-top:8px;">Source: The Guardian</div>
            </div>
            `;
        }).join('')}
    </div>`;
}

function renderPapersWeb(papers = []) {
    return `
    <div class="papers-section">
        <h2>ðŸ“„ Research Papers (${papers.length})</h2>
        ${papers.map(paper => `
            <div class="paper-item">
                <div class="paper-title">${sanitizeText(paper.title || 'Untitled')}</div>
                <div class="paper-authors">
                    <strong>Authors:</strong> ${Array.isArray(paper.authors) ? paper.authors.map(a => sanitizeText(a)).join(', ') : sanitizeText(paper.authors || 'Unknown')}
                </div>
                <div class="paper-abstract">
                    <strong>Abstract:</strong> ${sanitizeText(paper.abstract || paper.summary || 'No abstract available')}
                </div>
                <div class="paper-meta">
                    <span><strong>Published:</strong> ${sanitizeText(paper.published || paper.published_date || 'Unknown')}</span>
                    <a href="${sanitizeText(paper.pdf_url || paper.link || (paper.id || paper.arxiv_id ? `https://arxiv.org/abs/${paper.id || paper.arxiv_id}` : '#'))}" 
                       target="_blank" class="paper-link">ðŸ“„ View Paper</a>
                </div>
            </div>
        `).join('')}
    </div>`;
}

function buildWebReportHtml(reportData) {
    const topicsStr = sanitizeText((reportData.topics || []).join(', '));
    const aiSummarySection = reportData.aiSummary ? `
    <div class="ai-summary">
        <h2>ðŸ¤– AI Summary</h2>
        ${convertMarkdownToHtml(reportData.aiSummary)}
        <div class="generated-by">Generated by OpenAI GPT-4o-mini</div>
    </div>
    ` : `
    <div class="no-summary">
        <h3>ðŸ“Š Report Summary</h3>
        <p>No AI summary available. Please check the papers below for detailed information.</p>
    </div>
    `;

    const newsSection = renderNewsWeb(reportData.news || []);
    const papersSection = renderPapersWeb(reportData.papers || []);

    return sanitizeHtml(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Research Report - ${sanitizeText(reportData.date || '')}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f8f9fa;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }
        .header h1 { margin: 0 0 10px 0; font-size: 2.5em; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 30px 0; }
        .stat-card { background: white; padding: 20px; border-radius: 12px; text-align: center; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); }
        .stat-number { font-size: 2em; font-weight: bold; color: #667eea; margin-bottom: 5px; }
        .stat-label { color: #666; font-size: 0.9em; }
        .ai-summary { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 12px; margin: 30px 0; box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1); }
        .ai-summary h2 { margin: 0 0 20px 0; color: white; }
        .papers-section { background: white; padding: 30px; border-radius: 12px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); }
        .paper-item { border-left: 4px solid #667eea; padding: 20px; margin-bottom: 20px; background: #f8f9fa; border-radius: 0 8px 8px 0; }
        .paper-title { font-size: 1.2em; font-weight: 600; color: #333; margin-bottom: 10px; }
        .paper-authors { color: #666; font-size: 0.9em; margin-bottom: 10px; }
        .paper-abstract { color: #555; line-height: 1.6; margin-bottom: 10px; }
        .paper-meta { display: flex; justify-content: space-between; align-items: center; font-size: 0.8em; color: #999; }
        .paper-link { color: #667eea; text-decoration: none; font-weight: 500; }
        .paper-link:hover { text-decoration: underline; }
        .no-summary { text-align: center; padding: 30px; color: #666; background: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); }
        @media (max-width: 768px) { body { padding: 10px; } .header h1 { font-size: 2em; } .stats { grid-template-columns: 1fr; } }
    </style>
    </head>
<body>
    <div class="header">
        <h1>ðŸ¤– AI Research News Report</h1>
        <p>${sanitizeText(new Date(reportData.date || Date.now()).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }))}</p>
        <p>Topics: ${topicsStr}</p>
    </div>
    <div class="stats">
        <div class="stat-card"><div class="stat-number">${(reportData.papers || []).length}</div><div class="stat-label">Research Papers</div></div>
        <div class="stat-card"><div class="stat-number">${(reportData.topics || []).length}</div><div class="stat-label">Topics Covered</div></div>
        <div class="stat-card"><div class="stat-number">${reportData.aiSummary ? 'Yes' : 'No'}</div><div class="stat-label">AI Summary</div></div>
    </div>
    ${aiSummarySection}
    ${newsSection}
    ${papersSection}
    <div class="papers-section" style="text-align:center; color:#666; font-size:0.9em; margin-top: 20px;">
        <p><em>Generated by AI News Agent</em></p>
    </div>
</body>
</html>`);
}

function renderNewsEmail(news = []) {
    if (!Array.isArray(news) || news.length === 0) return '';
    return `
    <div style="background:#ffffff; padding:16px; border-radius:8px; box-shadow:0 1px 4px rgba(0,0,0,0.06);">
        <h3 style="margin:0 0 12px 0;">ðŸ“° News</h3>
        ${news.map(group => {
            const summariesById = Object.fromEntries((group.perArticleSummaries || []).map(s => [s.articleId, s]));
            return `
            <div style="margin:12px 0 16px 0;">
                <div style="font-weight:600; margin-bottom:6px;">${sanitizeText(group.topic || '')}</div>
                ${(group.articles || []).map(article => {
                    const s = summariesById[article.id] || {};
                    const link = sanitizeText(s.link || article.shortUrl || article.url || '#');
                    const title = sanitizeText(article.title || 'Untitled');
                    const summaryText = sanitizeText(s.text || '');
                    return `
                    <div style="margin:10px 0;">
                        <a href="${link}" target="_blank" style="color:#667eea; text-decoration:none; font-weight:600;">${title}</a>
                        <br/>
                        <div style="margin-top:6px; color:#333;">${summaryText.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</div>
                    </div>
                    `;
                }).join('')}
            </div>
            `;
        }).join('')}
    </div>`;
}

function buildEmailReportHtml(reportData, topics, reportDate, includeNewsInEmail = true) {
    const dateStr = reportDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' });
    const topicsStr = sanitizeText((topics || []).join(', '));
    const aiSummary = convertMarkdownToEmailHtml(reportData.aiSummary || '');
    const hasAISummary = aiSummary && aiSummary.trim() !== '';
    const reportUrl = sanitizeText(reportData.pagesUrl || '#');

    const newsSection = includeNewsInEmail ? renderNewsEmail(reportData.news || []) : '';

    const html = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Research News Report</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; }
        .content { padding: 20px; background: #f8f9fa; }
        .ai-summary { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 16px; border-radius: 8px; margin: 12px 0; }
        .ai-summary h3 { color: white; margin-bottom: 10px; }
        .stats { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; margin: 12px 0; }
        .stat { text-align: center; padding: 10px; background: white; border-radius: 8px; box-shadow: 0 1px 6px rgba(0,0,0,0.08); }
        .stat-number { font-size: 1.3em; font-weight: bold; color: #667eea; }
        .stat-label { font-size: 12px; color: #666; }
        .full-report-link { text-align: center; margin: 16px 0; }
        .full-report-link a { background: #667eea; color: white; padding: 10px 18px; text-decoration: none; border-radius: 8px; display: inline-block; }
        .footer { text-align: center; padding: 16px; color: #666; font-size: 12px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸ¤– AI Research News Report</h1>
        <p>${dateStr}</p>
        <p>Topics: ${topicsStr}</p>
    </div>
    <div class="content">
        ${hasAISummary ? `
        <div class="ai-summary">
            <h3>ðŸ¤– AI Research Summary</h3>
            ${aiSummary}
            <div style="font-size: 12px; opacity: 0.9; color: white;">Generated by OpenAI GPT-4o-mini</div>
        </div>` : `
        <div style="text-align: center; padding: 16px; color: #666; background:#fff; border-radius:8px;">
            <p>ðŸ“Š Report Summary</p>
            <p>No AI summary available. Please check the full report for details.</p>
        </div>`}

        <div class="stats">
            <div class="stat">
                <div class="stat-number">${((reportData.papers || []).length + 0)}</div>
                <div class="stat-label">Total Items</div>
            </div>
            <div class="stat">
                <div class="stat-number">${Array.isArray(reportData.news) ? reportData.news.reduce((acc, g) => acc + (g.articles?.length || 0), 0) : 0}</div>
                <div class="stat-label">News Articles</div>
            </div>
            <div class="stat">
                <div class="stat-number">${(reportData.papers || []).length}</div>
                <div class="stat-label">Research Papers</div>
            </div>
        </div>

        ${newsSection}

        <div class="full-report-link">
            <a href="${reportUrl}" target="_blank">ðŸ“„ View Full Report with All Papers</a>
        </div>
    </div>
    <div class="footer">
        <p>Generated by AI Research News Agent</p>
        <p>Stay updated with the latest developments in artificial intelligence research</p>
    </div>
</body>
</html>`;

    return sanitizeHtml(html);
}

module.exports = { buildWebReportHtml, buildEmailReportHtml };


